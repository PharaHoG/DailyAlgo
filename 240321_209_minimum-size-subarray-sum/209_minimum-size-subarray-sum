# 209. 长度最小的子数组

## 题目描述

给定一个含有 `n` 个正整数的数组和一个正整数 `target` **。**

找出该数组中满足其总和大于等于 `target` 的长度最小的 **连续**

**子数组**

`[numsl, numsl+1, ..., numsr-1, numsr]` ，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。

**示例 1：**

```
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
```

**示例 2：**

```
输入：target = 4, nums = [1,4,4]
输出：1
```

**示例 3：**

```
输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0
```



## 方法一：滑动窗口（快慢指针）



- **思路：**
  - 使用两个指针，一个指向滑动窗口的左端，一个指向右端（包括指针所指）
  - 当窗口内值小于目标值时，移动右端；当窗口内值大于目标值时，移动左端
  - 使用左闭右闭区间，使得左右指针内（包括指针所指）的所有值的和为`sum`
  - 子数组的长度为`fast`-`slow`

**源代码：**

```cpp
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int fast = 0, slow = 0;
        int result = 100001;
        int sum = 0;

        while(fast < nums.size()) {
            // 左闭右开区间，fast所指的值，不在窗口内
            sum += nums[fast++];

            while(sum >= target) {
            // 重点，为什么是大于等于而不是等于
                // 因为 sum == target 时，满足题意，长度需要被记录
                result = result < fast - slow ? result : fast - slow;
                sum -= nums[slow++];
            }
        }
		
        // 多个可能结果，纪录最小值时，初始化结果为一个极大值
        // 对于每个可能结果，进行判断，如果新值更小，那么做记录
        return result == 100001 ? 0 : result;
    }
};
```

